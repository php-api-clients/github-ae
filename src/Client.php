<?php

declare(strict_types=1);

namespace ApiClients\Client\GitHubAE;

use ApiClients\Contracts\HTTP\Headers\AuthenticationInterface;
use ApiClients\Contracts\OpenAPI\WebHooksInterface;
use InvalidArgumentException;
use League\OpenAPIValidation\Schema\SchemaValidator;
use React\Http\Browser;
use Rx\Observable;

use function array_key_exists;
use function count;
use function explode;
use function React\Async\await;
use function WyriHaximus\React\awaitObservable;

final class Client implements ClientInterface
{
    private readonly AuthenticationInterface $authentication;
    private readonly Browser $browser;
    private readonly SchemaValidator $requestSchemaValidator;
    private readonly SchemaValidator $responseSchemaValidator;
    private array $router = [];
    private readonly OperationsInterface $operations;
    private readonly WebHooks $webHooks;
    private readonly Hydrators $hydrators;

    public function __construct(AuthenticationInterface $authentication, Browser $browser)
    {
        $this->authentication          = $authentication;
        $this->browser                 = $browser->withBase('https://{hostname}/api/v3')->withFollowRedirects(false);
        $this->requestSchemaValidator  = new SchemaValidator(SchemaValidator::VALIDATE_AS_REQUEST);
        $this->responseSchemaValidator = new SchemaValidator(SchemaValidator::VALIDATE_AS_RESPONSE);
        $this->hydrators               = new Hydrators();
        $this->operations              = new Operations(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        $this->webHooks                = new WebHooks($this->requestSchemaValidator, $this->hydrators);
    }

    // phpcs:disable
    /**
     * @return ($call is Meta\Root::OPERATION_MATCH ? Schema\Root : ($call is EnterpriseAdmin\ListGlobalWebhooks::OPERATION_MATCH ? Schema\GlobalHook : ($call is EnterpriseAdmin\CreateGlobalWebhook::OPERATION_MATCH ? Schema\GlobalHook : ($call is EnterpriseAdmin\GetGlobalWebhook::OPERATION_MATCH ? Schema\GlobalHook : ($call is EnterpriseAdmin\DeleteGlobalWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\UpdateGlobalWebhook::OPERATION_MATCH ? Schema\GlobalHook2 : ($call is EnterpriseAdmin\PingGlobalWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\ListPublicKeys::OPERATION_MATCH ? Schema\PublicKeyFull : ($call is EnterpriseAdmin\DeletePublicKey::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\CreateOrg::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is EnterpriseAdmin\UpdateOrgName::OPERATION_MATCH ? Schema\Operations\EnterpriseAdmin\UpdateOrgName\Response\ApplicationJson\Accepted : ($call is EnterpriseAdmin\ListPreReceiveEnvironments::OPERATION_MATCH ? Schema\PreReceiveEnvironment : ($call is EnterpriseAdmin\CreatePreReceiveEnvironment::OPERATION_MATCH ? Schema\PreReceiveEnvironment : ($call is EnterpriseAdmin\GetPreReceiveEnvironment::OPERATION_MATCH ? Schema\PreReceiveEnvironment : ($call is EnterpriseAdmin\DeletePreReceiveEnvironment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\UpdatePreReceiveEnvironment::OPERATION_MATCH ? Schema\PreReceiveEnvironment : ($call is EnterpriseAdmin\StartPreReceiveEnvironmentDownload::OPERATION_MATCH ? Schema\PreReceiveEnvironmentDownloadStatus : ($call is EnterpriseAdmin\StartPreReceiveEnvironmentDownloadStreaming::OPERATION_MATCH ? iterable<string>|Schema\PreReceiveEnvironmentDownloadStatus : ($call is EnterpriseAdmin\GetDownloadStatusForPreReceiveEnvironment::OPERATION_MATCH ? Schema\PreReceiveEnvironmentDownloadStatus : ($call is EnterpriseAdmin\GetDownloadStatusForPreReceiveEnvironmentStreaming::OPERATION_MATCH ? iterable<string>|Schema\PreReceiveEnvironmentDownloadStatus : ($call is EnterpriseAdmin\ListPersonalAccessTokens::OPERATION_MATCH ? Schema\Authorization : ($call is EnterpriseAdmin\DeletePersonalAccessToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\DeleteUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\CreateImpersonationOAuthToken::OPERATION_MATCH ? Schema\Authorization : ($call is EnterpriseAdmin\DeleteImpersonationOAuthToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\GetAuthenticated::OPERATION_MATCH ? Schema\Integration : ($call is Apps\CreateFromManifest::OPERATION_MATCH ? Schema\Operations\Apps\CreateFromManifest\Response\ApplicationJson\Created : ($call is Apps\GetWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Apps\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Apps\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operations\Apps\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted : ($call is Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? Schema\IntegrationInstallationRequest : ($call is Apps\ListInstallations::OPERATION_MATCH ? Schema\Installation : ($call is Apps\GetInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Apps\DeleteInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\CreateInstallationAccessToken::OPERATION_MATCH ? Schema\InstallationToken : ($call is Apps\SuspendInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\UnsuspendInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\DeleteAuthorization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\CheckToken::OPERATION_MATCH ? Schema\Authorization : ($call is Apps\DeleteToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\ResetToken::OPERATION_MATCH ? Schema\Authorization : ($call is Apps\ResetAuthorization::OPERATION_MATCH ? Schema\Authorization : ($call is Apps\GetBySlug::OPERATION_MATCH ? Schema\Integration : ($call is CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? Schema\CodeOfConduct : ($call is CodesOfConduct\GetConductCode::OPERATION_MATCH ? Schema\CodeOfConduct : ($call is Emojis\Get::OPERATION_MATCH ? Schema\Operations\Emojis\Get\Response\ApplicationJson\Ok : ($call is EnterpriseAdmin\GetAnnouncement::OPERATION_MATCH ? Schema\Announcement : ($call is EnterpriseAdmin\RemoveAnnouncement::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\SetAnnouncement::OPERATION_MATCH ? Schema\Announcement : ($call is EnterpriseAdmin\GetLicenseInformation::OPERATION_MATCH ? Schema\LicenseInfo : ($call is EnterpriseAdmin\GetAllStats::OPERATION_MATCH ? Schema\EnterpriseOverview : ($call is EnterpriseAdmin\GetCommentStats::OPERATION_MATCH ? Schema\EnterpriseCommentOverview : ($call is EnterpriseAdmin\GetGistStats::OPERATION_MATCH ? Schema\EnterpriseGistOverview : ($call is EnterpriseAdmin\GetHooksStats::OPERATION_MATCH ? Schema\EnterpriseHookOverview : ($call is EnterpriseAdmin\GetIssueStats::OPERATION_MATCH ? Schema\EnterpriseIssueOverview : ($call is EnterpriseAdmin\GetMilestoneStats::OPERATION_MATCH ? Schema\EnterpriseMilestoneOverview : ($call is EnterpriseAdmin\GetOrgStats::OPERATION_MATCH ? Schema\EnterpriseOrganizationOverview : ($call is EnterpriseAdmin\GetPagesStats::OPERATION_MATCH ? Schema\EnterprisePageOverview : ($call is EnterpriseAdmin\GetPullRequestStats::OPERATION_MATCH ? Schema\EnterprisePullRequestOverview : ($call is EnterpriseAdmin\GetRepoStats::OPERATION_MATCH ? Schema\EnterpriseRepositoryOverview : ($call is EnterpriseAdmin\GetUserStats::OPERATION_MATCH ? Schema\EnterpriseUserOverview : ($call is EnterpriseAdmin\GetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? Schema\ActionsEnterprisePermissions : ($call is EnterpriseAdmin\SetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? Schema\Operations\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\ApplicationJson\Ok : ($call is EnterpriseAdmin\SetSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\EnableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\DisableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\GetAllowedActionsEnterprise::OPERATION_MATCH ? Schema\SelectedActions : ($call is EnterpriseAdmin\SetAllowedActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise::OPERATION_MATCH ? Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise\Response\ApplicationJson\Ok : ($call is EnterpriseAdmin\CreateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is EnterpriseAdmin\GetSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is EnterpriseAdmin\DeleteSelfHostedRunnerGroupFromEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\UpdateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\ApplicationJson\Ok : ($call is EnterpriseAdmin\SetSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\AddSelfHostedRunnerToGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\RemoveSelfHostedRunnerFromGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\ListSelfHostedRunnersForEnterprise::OPERATION_MATCH ? Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise\Response\ApplicationJson\Ok : ($call is EnterpriseAdmin\ListRunnerApplicationsForEnterprise::OPERATION_MATCH ? Schema\RunnerApplication : ($call is EnterpriseAdmin\CreateRegistrationTokenForEnterprise::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is EnterpriseAdmin\CreateRemoveTokenForEnterprise::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is EnterpriseAdmin\GetSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Runner : ($call is EnterpriseAdmin\DeleteSelfHostedRunnerFromEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\GetAuditLog::OPERATION_MATCH ? Schema\AuditLogEvent : ($call is SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\OrganizationSecretScanningAlert : ($call is Activity\GetFeeds::OPERATION_MATCH ? Schema\Feed : ($call is Gists\List_::OPERATION_MATCH ? Schema\BaseGist : ($call is Gists\Create::OPERATION_MATCH ? Schema\GistSimple : ($call is Gists\ListPublic::OPERATION_MATCH ? Schema\BaseGist : ($call is Gists\ListStarred::OPERATION_MATCH ? Schema\BaseGist : ($call is Gists\Get::OPERATION_MATCH ? Schema\GistSimple : ($call is Gists\Delete::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\Update::OPERATION_MATCH ? Schema\GistSimple : ($call is Gists\ListComments::OPERATION_MATCH ? Schema\GistComment : ($call is Gists\CreateComment::OPERATION_MATCH ? Schema\GistComment : ($call is Gists\GetComment::OPERATION_MATCH ? Schema\GistComment : ($call is Gists\DeleteComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\UpdateComment::OPERATION_MATCH ? Schema\GistComment : ($call is Gists\ListCommits::OPERATION_MATCH ? Schema\GistCommit : ($call is Gists\ListForks::OPERATION_MATCH ? Schema\GistSimple : ($call is Gists\Fork::OPERATION_MATCH ? Schema\BaseGist : ($call is Gists\CheckIsStarred::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\Star::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\Unstar::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\GetRevision::OPERATION_MATCH ? Schema\GistSimple : ($call is Gitignore\GetAllTemplates::OPERATION_MATCH ? Schema\Operations\Gitignore\GetAllTemplates\Response\ApplicationJson\Ok : ($call is Gitignore\GetTemplate::OPERATION_MATCH ? Schema\GitignoreTemplate : ($call is Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? Schema\Operations\Apps\ListReposAccessibleToInstallation\Response\ApplicationJson\Ok : ($call is Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\List_::OPERATION_MATCH ? Schema\Issue : ($call is Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? Schema\LicenseSimple : ($call is Licenses\Get::OPERATION_MATCH ? Schema\License : ($call is Markdown\Render::OPERATION_MATCH ? Schema\Operations\Markdown\Render\Response\TextHtml\Ok : ($call is Markdown\RenderRaw::OPERATION_MATCH ? Schema\Operations\Markdown\RenderRaw\Response\TextHtml\Ok : ($call is Meta\Get::OPERATION_MATCH ? Schema\ApiOverview : ($call is Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread : ($call is Activity\MarkNotificationsAsRead::OPERATION_MATCH ? Schema\Operations\Activity\MarkNotificationsAsRead\Response\ApplicationJson\Accepted : ($call is Activity\GetThread::OPERATION_MATCH ? Schema\Thread : ($call is Activity\MarkThreadAsRead::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? Schema\ThreadSubscription : ($call is Activity\SetThreadSubscription::OPERATION_MATCH ? Schema\ThreadSubscription : ($call is Activity\DeleteThreadSubscription::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Meta\GetOctocat::OPERATION_MATCH ? Schema\Operations\Meta\GetOctocat\Response\ApplicationOctocatStream\Ok : ($call is Orgs\List_::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Orgs\Get::OPERATION_MATCH ? Schema\OrganizationFull : ($call is Orgs\Update::OPERATION_MATCH ? Schema\OrganizationFull : ($call is Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsOrganizationPermissions : ($call is Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? Schema\Operations\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\ApplicationJson\Ok : ($call is Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? Schema\SelectedActions : ($call is Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListSelfHostedRunnerGroupsForOrg::OPERATION_MATCH ? Schema\Operations\Actions\ListSelfHostedRunnerGroupsForOrg\Response\ApplicationJson\Ok : ($call is Actions\CreateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Actions\GetSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Actions\DeleteSelfHostedRunnerGroupFromOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\UpdateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Actions\AddSelfHostedRunnerToGroupForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? Schema\Operations\Actions\ListSelfHostedRunnersForOrg\Response\ApplicationJson\Ok : ($call is Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Runner : ($call is Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListOrgSecrets::OPERATION_MATCH ? Schema\Operations\Actions\ListOrgSecrets\Response\ApplicationJson\Ok : ($call is Actions\GetOrgPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Actions\GetOrgSecret::OPERATION_MATCH ? Schema\OrganizationActionsSecret : ($call is Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Actions\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operations\Actions\ListSelectedReposForOrgSecret\Response\ApplicationJson\Ok : ($call is Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Orgs\GetAuditLog::OPERATION_MATCH ? Schema\AuditLogEvent : ($call is CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? Schema\CodeScanningOrganizationAlertItems : ($call is Teams\ExternalIdpGroupInfoForOrg::OPERATION_MATCH ? Schema\ExternalGroup : ($call is Teams\ListExternalIdpGroupsForOrg::OPERATION_MATCH ? Schema\ExternalGroups : ($call is Orgs\ListWebhooks::OPERATION_MATCH ? Schema\OrgHook : ($call is Orgs\CreateWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Orgs\GetWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Orgs\DeleteWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Orgs\UpdateWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Orgs\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Orgs\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operations\Orgs\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted : ($call is Orgs\PingWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\GetOrgInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Orgs\ListAppInstallations::OPERATION_MATCH ? Schema\Operations\Orgs\ListAppInstallations\Response\ApplicationJson\Ok : ($call is Issues\ListForOrg::OPERATION_MATCH ? Schema\Issue : ($call is Orgs\ListMembers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Orgs\CheckMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Orgs\RemoveMember::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Orgs\GetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Orgs\SetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Orgs\RemoveMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Migrations\ListForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Migrations\StartForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Migrations\GetStatusForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Migrations\DownloadArchiveForOrgStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Migrations\UnlockRepoForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Migrations\ListReposForOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Orgs\ListOutsideCollaborators::OPERATION_MATCH ? Schema\SimpleUser : ($call is Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? Schema\Operations\Orgs\ConvertMemberToOutsideCollaborator\Response\ApplicationJson\Accepted : ($call is Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\ListForOrg::OPERATION_MATCH ? Schema\Project : ($call is Projects\CreateForOrg::OPERATION_MATCH ? Schema\Project : ($call is Repos\ListForOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Repos\CreateInOrg::OPERATION_MATCH ? Schema\Repository : ($call is Teams\List_::OPERATION_MATCH ? Schema\Team : ($call is Teams\Create::OPERATION_MATCH ? Schema\TeamFull : ($call is Teams\GetByName::OPERATION_MATCH ? Schema\TeamFull : ($call is Teams\DeleteInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateInOrg::OPERATION_MATCH ? Schema\TeamFull : ($call is Teams\ListDiscussionsInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\CreateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\GetDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UnlinkExternalIdpGroupFromTeamForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\LinkExternalIdpGroupToTeamForOrg::OPERATION_MATCH ? Schema\ExternalGroup : ($call is Teams\ListMembersInOrg::OPERATION_MATCH ? Schema\SimpleUser : ($call is Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListProjectsInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\RemoveProjectInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListReposInOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? Schema\TeamRepository : ($call is Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\RemoveRepoInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListChildInOrg::OPERATION_MATCH ? Schema\Team : ($call is Projects\GetCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Projects\DeleteCard::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\UpdateCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Projects\MoveCard::OPERATION_MATCH ? Schema\Operations\Projects\MoveCard\Response\ApplicationJson\Created : ($call is Projects\GetColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Projects\DeleteColumn::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\UpdateColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Projects\ListCards::OPERATION_MATCH ? Schema\ProjectCard : ($call is Projects\CreateCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Projects\MoveColumn::OPERATION_MATCH ? Schema\Operations\Projects\MoveColumn\Response\ApplicationJson\Created : ($call is Projects\Get::OPERATION_MATCH ? Schema\Project : ($call is Projects\Delete::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\Update::OPERATION_MATCH ? Schema\Project : ($call is Projects\ListCollaborators::OPERATION_MATCH ? Schema\SimpleUser : ($call is Projects\AddCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\RemoveCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Projects\GetPermissionForUser::OPERATION_MATCH ? Schema\ProjectCollaboratorPermission : ($call is Projects\ListColumns::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Projects\CreateColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is RateLimit\Get::OPERATION_MATCH ? Schema\RateLimitOverview : ($call is Repos\Get::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError : ($call is Repos\Delete::OPERATION_MATCH ? Schema\BasicError : ($call is Repos\Update::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError : ($call is Actions\ListArtifactsForRepo::OPERATION_MATCH ? Schema\Operations\Actions\ListArtifactsForRepo\Response\ApplicationJson\Ok : ($call is Actions\GetArtifact::OPERATION_MATCH ? Schema\Artifact : ($call is Actions\DeleteArtifact::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DownloadArtifact::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DownloadArtifactStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Actions\GetJobForWorkflowRun::OPERATION_MATCH ? Schema\Job : ($call is Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DownloadJobLogsForWorkflowRunStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Actions\ListRepoOrganizationSecrets::OPERATION_MATCH ? Schema\Operations\Actions\ListRepoOrganizationSecrets\Response\ApplicationJson\Ok : ($call is Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? Schema\ActionsRepositoryPermissions : ($call is Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\GetAllowedActionsRepository::OPERATION_MATCH ? Schema\SelectedActions : ($call is Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? Schema\Operations\Actions\ListSelfHostedRunnersForRepo\Response\ApplicationJson\Ok : ($call is Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Runner : ($call is Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? Schema\Operations\Actions\ListWorkflowRunsForRepo\Response\ApplicationJson\Ok : ($call is Actions\GetWorkflowRun::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Actions\DeleteWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? Schema\Operations\Actions\ListWorkflowRunArtifacts\Response\ApplicationJson\Ok : ($call is Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? Schema\Operations\Actions\ListJobsForWorkflowRunAttempt\Response\ApplicationJson\Ok : ($call is Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DownloadWorkflowRunAttemptLogsStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Actions\CancelWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? Schema\Operations\Actions\ListJobsForWorkflowRun\Response\ApplicationJson\Ok : ($call is Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\DownloadWorkflowRunLogsStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ReRunWorkflow::OPERATION_MATCH ? Schema\EmptyObject : ($call is Actions\GetWorkflowRunUsage::OPERATION_MATCH ? Schema\WorkflowRunUsage : ($call is Actions\ListRepoSecrets::OPERATION_MATCH ? Schema\Operations\Actions\ListRepoSecrets\Response\ApplicationJson\Ok : ($call is Actions\GetRepoPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Actions\GetRepoSecret::OPERATION_MATCH ? Schema\ActionsSecret : ($call is Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Actions\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListRepoWorkflows::OPERATION_MATCH ? Schema\Operations\Actions\ListRepoWorkflows\Response\ApplicationJson\Ok : ($call is Actions\GetWorkflow::OPERATION_MATCH ? Schema\Workflow : ($call is Actions\DisableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\EnableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Actions\ListWorkflowRuns::OPERATION_MATCH ? Schema\Operations\Actions\ListWorkflowRuns\Response\ApplicationJson\Ok : ($call is Actions\GetWorkflowUsage::OPERATION_MATCH ? Schema\WorkflowUsage : ($call is Issues\ListAssignees::OPERATION_MATCH ? Schema\SimpleUser : ($call is Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListAutolinks::OPERATION_MATCH ? Schema\Autolink : ($call is Repos\CreateAutolink::OPERATION_MATCH ? Schema\Autolink : ($call is Repos\GetAutolink::OPERATION_MATCH ? Schema\Autolink : ($call is Repos\DeleteAutolink::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListBranches::OPERATION_MATCH ? Schema\ShortBranch : ($call is Repos\GetBranch::OPERATION_MATCH ? Schema\BranchWithProtection|Schema\BasicError : ($call is Repos\GetBranchProtection::OPERATION_MATCH ? Schema\BranchProtection : ($call is Repos\UpdateBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranch : ($call is Repos\DeleteBranchProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Repos\SetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview : ($call is Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview : ($call is Repos\GetCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetStatusChecksProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy : ($call is Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy : ($call is Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? Schema\Operations\Repos\GetAllStatusCheckContexts\Response\ApplicationJson\Ok : ($call is Repos\SetStatusCheckContexts::OPERATION_MATCH ? Schema\Operations\Repos\SetStatusCheckContexts\Response\ApplicationJson\Ok : ($call is Repos\AddStatusCheckContexts::OPERATION_MATCH ? Schema\Operations\Repos\AddStatusCheckContexts\Response\ApplicationJson\Ok : ($call is Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? Schema\Operations\Repos\RemoveStatusCheckContexts\Response\ApplicationJson\Ok : ($call is Repos\GetAccessRestrictions::OPERATION_MATCH ? Schema\BranchRestrictionPolicy : ($call is Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Integration : ($call is Repos\SetAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Repos\AddAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Team : ($call is Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\SimpleUser : ($call is Repos\SetUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Repos\AddUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Checks\Create::OPERATION_MATCH ? Schema\CheckRun : ($call is Checks\Get::OPERATION_MATCH ? Schema\CheckRun : ($call is Checks\Update::OPERATION_MATCH ? Schema\CheckRun : ($call is Checks\ListAnnotations::OPERATION_MATCH ? Schema\CheckAnnotation : ($call is Checks\RerequestRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Checks\CreateSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Checks\SetSuitesPreferences::OPERATION_MATCH ? Schema\CheckSuitePreference : ($call is Checks\GetSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Checks\ListForSuite::OPERATION_MATCH ? Schema\Operations\Checks\ListForSuite\Response\ApplicationJson\Ok : ($call is Checks\RerequestSuite::OPERATION_MATCH ? Schema\EmptyObject : ($call is CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\CodeScanningAlertItems : ($call is CodeScanning\GetAlert::OPERATION_MATCH ? Schema\CodeScanningAlert : ($call is CodeScanning\UpdateAlert::OPERATION_MATCH ? Schema\CodeScanningAlert : ($call is CodeScanning\ListAlertInstances::OPERATION_MATCH ? Schema\CodeScanningAlertInstance : ($call is CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? Schema\CodeScanningAnalysis : ($call is CodeScanning\GetAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysis|Schema\Operations\CodeScanning\GetAnalysis\Response\ApplicationJsonSarif\Ok : ($call is CodeScanning\DeleteAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysisDeletion : ($call is CodeScanning\UploadSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsReceipt : ($call is CodeScanning\GetSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsStatus : ($call is Repos\CodeownersErrors::OPERATION_MATCH ? Schema\CodeownersErrors : ($call is Repos\ListCollaborators::OPERATION_MATCH ? Schema\Collaborator : ($call is Repos\CheckCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\AddCollaborator::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Repos\RemoveCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? Schema\RepositoryCollaboratorPermission : ($call is Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? Schema\CommitComment : ($call is Repos\GetCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Repos\DeleteCommitComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Reactions\ListForCommitComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForCommitComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForCommitComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListCommits::OPERATION_MATCH ? Schema\Commit : ($call is Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? Schema\BranchShort : ($call is Repos\ListCommentsForCommit::OPERATION_MATCH ? Schema\CommitComment : ($call is Repos\CreateCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Repos\GetCommit::OPERATION_MATCH ? Schema\Commit : ($call is Checks\ListForRef::OPERATION_MATCH ? Schema\Operations\Checks\ListForRef\Response\ApplicationJson\Ok : ($call is Checks\ListSuitesForRef::OPERATION_MATCH ? Schema\Operations\Checks\ListSuitesForRef\Response\ApplicationJson\Ok : ($call is Repos\GetCombinedStatusForRef::OPERATION_MATCH ? Schema\CombinedCommitStatus : ($call is Repos\ListCommitStatusesForRef::OPERATION_MATCH ? Schema\Status|Schema\BasicError : ($call is Repos\CompareCommits::OPERATION_MATCH ? Schema\CommitComparison : ($call is Repos\GetContent::OPERATION_MATCH ? Schema\ContentTree|Schema\Operations\Repos\GetContent\Response\ApplicationJson\Ok : ($call is Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? Schema\FileCommit : ($call is Repos\DeleteFile::OPERATION_MATCH ? Schema\FileCommit : ($call is Repos\ListContributors::OPERATION_MATCH ? Schema\Contributor : ($call is Repos\ListDeployments::OPERATION_MATCH ? Schema\Deployment : ($call is Repos\CreateDeployment::OPERATION_MATCH ? Schema\Deployment|Schema\Operations\Repos\CreateDeployment\Response\ApplicationJson\Accepted : ($call is Repos\GetDeployment::OPERATION_MATCH ? Schema\Deployment : ($call is Repos\DeleteDeployment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListDeploymentStatuses::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Repos\CreateDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Repos\GetDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Repos\CreateDispatchEvent::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\GetAllEnvironments::OPERATION_MATCH ? Schema\Operations\Repos\GetAllEnvironments\Response\ApplicationJson\Ok : ($call is Repos\GetEnvironment::OPERATION_MATCH ? Schema\Environment : ($call is Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? Schema\Environment : ($call is Repos\DeleteAnEnvironment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? Schema\Operations\Repos\ListDeploymentBranchPolicies\Response\ApplicationJson\Ok : ($call is Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\ListRepoEvents::OPERATION_MATCH ? Schema\Event : ($call is Repos\ListForks::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Repos\CreateFork::OPERATION_MATCH ? Schema\FullRepository : ($call is Git\CreateBlob::OPERATION_MATCH ? Schema\ShortBlob : ($call is Git\GetBlob::OPERATION_MATCH ? Schema\Blob : ($call is Git\CreateCommit::OPERATION_MATCH ? Schema\GitCommit : ($call is Git\GetCommit::OPERATION_MATCH ? Schema\GitCommit : ($call is Git\ListMatchingRefs::OPERATION_MATCH ? Schema\GitRef : ($call is Git\GetRef::OPERATION_MATCH ? Schema\GitRef : ($call is Git\CreateRef::OPERATION_MATCH ? Schema\GitRef : ($call is Git\DeleteRef::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Git\UpdateRef::OPERATION_MATCH ? Schema\GitRef : ($call is Git\CreateTag::OPERATION_MATCH ? Schema\GitTag : ($call is Git\GetTag::OPERATION_MATCH ? Schema\GitTag : ($call is Git\CreateTree::OPERATION_MATCH ? Schema\GitTree : ($call is Git\GetTree::OPERATION_MATCH ? Schema\GitTree : ($call is Repos\ListWebhooks::OPERATION_MATCH ? Schema\Hook : ($call is Repos\CreateWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Repos\GetWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Repos\DeleteWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Repos\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Repos\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operations\Repos\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted : ($call is Repos\PingWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\TestPushWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\GetRepoInstallation::OPERATION_MATCH ? Schema\Installation|Schema\BasicError : ($call is Repos\ListInvitations::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Repos\DeleteInvitation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateInvitation::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Issues\ListForRepo::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Issues\Create::OPERATION_MATCH ? Schema\Issue : ($call is Issues\ListCommentsForRepo::OPERATION_MATCH ? Schema\IssueComment : ($call is Issues\GetComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Issues\DeleteComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\UpdateComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Reactions\ListForIssueComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForIssueComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForIssueComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\ListEventsForRepo::OPERATION_MATCH ? Schema\IssueEvent : ($call is Issues\GetEvent::OPERATION_MATCH ? Schema\IssueEvent : ($call is Issues\Get::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Issues\Update::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Issues\AddAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Issues\RemoveAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\ListComments::OPERATION_MATCH ? Schema\IssueComment : ($call is Issues\CreateComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Issues\ListEvents::OPERATION_MATCH ? Schema\IssueEventForIssue : ($call is Issues\ListLabelsOnIssue::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Issues\SetLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Issues\AddLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Issues\RemoveAllLabels::OPERATION_MATCH ? Schema\BasicError : ($call is Issues\RemoveLabel::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Issues\Lock::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\Unlock::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Reactions\ListForIssue::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForIssue::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForIssue::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\ListEventsForTimeline::OPERATION_MATCH ? Schema\TimelineIssueEvents : ($call is Repos\ListDeployKeys::OPERATION_MATCH ? Schema\DeployKey : ($call is Repos\CreateDeployKey::OPERATION_MATCH ? Schema\DeployKey : ($call is Repos\GetDeployKey::OPERATION_MATCH ? Schema\DeployKey : ($call is Repos\DeleteDeployKey::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\ListLabelsForRepo::OPERATION_MATCH ? Schema\Label : ($call is Issues\CreateLabel::OPERATION_MATCH ? Schema\Label : ($call is Issues\GetLabel::OPERATION_MATCH ? Schema\Label : ($call is Issues\DeleteLabel::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\UpdateLabel::OPERATION_MATCH ? Schema\Label : ($call is Repos\ListLanguages::OPERATION_MATCH ? Schema\Language : ($call is Repos\EnableLfsForRepo::OPERATION_MATCH ? Schema\Operations\Repos\EnableLfsForRepo\Response\ApplicationJson\Accepted : ($call is Repos\DisableLfsForRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Licenses\GetForRepo::OPERATION_MATCH ? Schema\LicenseContent : ($call is Repos\MergeUpstream::OPERATION_MATCH ? Schema\MergedUpstream : ($call is Repos\Merge::OPERATION_MATCH ? Schema\Commit : ($call is Issues\ListMilestones::OPERATION_MATCH ? Schema\Milestone : ($call is Issues\CreateMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Issues\GetMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Issues\DeleteMilestone::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\UpdateMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Issues\ListLabelsForMilestone::OPERATION_MATCH ? Schema\Label : ($call is Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread : ($call is Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? Schema\Operations\Activity\MarkRepoNotificationsAsRead\Response\ApplicationJson\Accepted : ($call is Repos\GetPages::OPERATION_MATCH ? Schema\Page : ($call is Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\CreatePagesSite::OPERATION_MATCH ? Schema\Page : ($call is Repos\DeletePagesSite::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListPagesBuilds::OPERATION_MATCH ? Schema\PageBuild : ($call is Repos\RequestPagesBuild::OPERATION_MATCH ? Schema\PageBuildStatus : ($call is Repos\GetLatestPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Repos\GetPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Projects\ListForRepo::OPERATION_MATCH ? Schema\Project : ($call is Projects\CreateForRepo::OPERATION_MATCH ? Schema\Project : ($call is Pulls\List_::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Pulls\Create::OPERATION_MATCH ? Schema\PullRequest : ($call is Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Pulls\GetReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Pulls\DeleteReviewComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Pulls\UpdateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Pulls\Get::OPERATION_MATCH ? Schema\PullRequest : ($call is Pulls\Update::OPERATION_MATCH ? Schema\PullRequest : ($call is Pulls\ListReviewComments::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Pulls\CreateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Pulls\ListCommits::OPERATION_MATCH ? Schema\Commit : ($call is Pulls\ListFiles::OPERATION_MATCH ? Schema\DiffEntry : ($call is Pulls\CheckIfMerged::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Pulls\Merge::OPERATION_MATCH ? Schema\PullRequestMergeResult : ($call is Pulls\ListRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestReviewRequest : ($call is Pulls\RequestReviewers::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Pulls\ListReviews::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\CreateReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\GetReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\UpdateReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\DeletePendingReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\ListCommentsForReview::OPERATION_MATCH ? Schema\ReviewComment : ($call is Pulls\DismissReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\SubmitReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Pulls\UpdateBranch::OPERATION_MATCH ? Schema\Operations\Pulls\UpdateBranch\Response\ApplicationJson\Accepted : ($call is Repos\GetReadme::OPERATION_MATCH ? Schema\ContentFile : ($call is Repos\GetReadmeInDirectory::OPERATION_MATCH ? Schema\ContentFile : ($call is Repos\ListReleases::OPERATION_MATCH ? Schema\Release : ($call is Repos\CreateRelease::OPERATION_MATCH ? Schema\Release : ($call is Repos\GetReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Repos\DeleteReleaseAsset::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Repos\GetLatestRelease::OPERATION_MATCH ? Schema\Release : ($call is Repos\GetReleaseByTag::OPERATION_MATCH ? Schema\Release : ($call is Repos\GetRelease::OPERATION_MATCH ? Schema\Release : ($call is Repos\DeleteRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\UpdateRelease::OPERATION_MATCH ? Schema\Release : ($call is Repos\ListReleaseAssets::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Repos\UploadReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Reactions\ListForRelease::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\CreateForRelease::OPERATION_MATCH ? Schema\Reaction : ($call is Reactions\DeleteForRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is SecretScanning\GetAlert::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is SecretScanning\UpdateAlert::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? Schema\SecretScanningLocation : ($call is Activity\ListStargazersForRepo::OPERATION_MATCH ? Schema\Operations\Activity\ListStargazersForRepo\Response\ApplicationJson\Ok : ($call is Repos\GetCodeFrequencyStats::OPERATION_MATCH ? Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Ok|Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Accepted : ($call is Repos\GetCommitActivityStats::OPERATION_MATCH ? Schema\CommitActivity|Schema\Operations\Repos\GetCommitActivityStats\Response\ApplicationJson\Accepted : ($call is Repos\GetContributorsStats::OPERATION_MATCH ? Schema\ContributorActivity|Schema\Operations\Repos\GetContributorsStats\Response\ApplicationJson\Accepted : ($call is Repos\GetParticipationStats::OPERATION_MATCH ? Schema\ParticipationStats : ($call is Repos\GetPunchCardStats::OPERATION_MATCH ? Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Ok : ($call is Repos\CreateCommitStatus::OPERATION_MATCH ? Schema\Status : ($call is Activity\ListWatchersForRepo::OPERATION_MATCH ? Schema\SimpleUser : ($call is Activity\GetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription : ($call is Activity\SetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription : ($call is Activity\DeleteRepoSubscription::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\ListTags::OPERATION_MATCH ? Schema\Tag : ($call is Repos\DownloadTarballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\DownloadTarballArchiveStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Repos\ListTeams::OPERATION_MATCH ? Schema\Team : ($call is Repos\GetAllTopics::OPERATION_MATCH ? Schema\Topic : ($call is Repos\ReplaceAllTopics::OPERATION_MATCH ? Schema\Topic : ($call is Repos\Transfer::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Repos\DownloadZipballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\DownloadZipballArchiveStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Repos\CreateUsingTemplate::OPERATION_MATCH ? Schema\Repository : ($call is Search\Code::OPERATION_MATCH ? Schema\Operations\Search\Code\Response\ApplicationJson\Ok : ($call is Search\Commits::OPERATION_MATCH ? Schema\Operations\Search\Commits\Response\ApplicationJson\Ok : ($call is Search\IssuesAndPullRequests::OPERATION_MATCH ? Schema\Operations\Search\IssuesAndPullRequests\Response\ApplicationJson\Ok : ($call is Search\Labels::OPERATION_MATCH ? Schema\Operations\Search\Labels\Response\ApplicationJson\Ok : ($call is Search\Repos::OPERATION_MATCH ? Schema\Operations\Search\Repos\Response\ApplicationJson\Ok : ($call is Search\Topics::OPERATION_MATCH ? Schema\Operations\Search\Topics\Response\ApplicationJson\Ok : ($call is Search\Users::OPERATION_MATCH ? Schema\Operations\Search\Users\Response\ApplicationJson\Ok : ($call is Teams\GetLegacy::OPERATION_MATCH ? Schema\TeamFull : ($call is Teams\DeleteLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateLegacy::OPERATION_MATCH ? Schema\TeamFull : ($call is Teams\ListDiscussionsLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\CreateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\GetDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Teams\ListMembersLegacy::OPERATION_MATCH ? Schema\SimpleUser : ($call is Teams\GetMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\AddMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\RemoveMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership : ($call is Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership : ($call is Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListProjectsLegacy::OPERATION_MATCH ? Schema\TeamProject : ($call is Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? Schema\TeamProject : ($call is Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\RemoveProjectLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListReposLegacy::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? Schema\TeamRepository : ($call is Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\RemoveRepoLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Teams\ListChildLegacy::OPERATION_MATCH ? Schema\Team : ($call is Users\GetAuthenticated::OPERATION_MATCH ? Schema\Operations\Users\GetAuthenticated\Response\ApplicationJson\Ok : ($call is Users\UpdateAuthenticated::OPERATION_MATCH ? Schema\PrivateUser : ($call is Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Users\Follow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Users\Unfollow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Apps\ListInstallationsForAuthenticatedUser\Response\ApplicationJson\Ok : ($call is Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Apps\ListInstallationReposForAuthenticatedUser\Response\ApplicationJson\Ok : ($call is Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Issues\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Issue : ($call is Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration : ($call is Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration : ($call is Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Project : ($call is Repos\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository : ($call is Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository : ($call is Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|Schema\StarredRepository : ($call is Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Teams\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\TeamFull : ($call is Users\List_::OPERATION_MATCH ? Schema\SimpleUser : ($call is Users\GetByUsername::OPERATION_MATCH ? Schema\Operations\Users\GetByUsername\Response\ApplicationJson\Ok : ($call is Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Users\ListFollowersForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Users\ListFollowingForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Users\CheckFollowingForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Gists\ListForUser::OPERATION_MATCH ? Schema\BaseGist : ($call is Users\ListGpgKeysForUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Users\GetContextForUser::OPERATION_MATCH ? Schema\Hovercard : ($call is Apps\GetUserInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Users\ListPublicKeysForUser::OPERATION_MATCH ? Schema\KeySimple : ($call is Orgs\ListForUser::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Projects\ListForUser::OPERATION_MATCH ? Schema\Project : ($call is Repos\ListForUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Activity\ListReposStarredByUser::OPERATION_MATCH ? Schema\Operations\Activity\ListReposStarredByUser\Response\ApplicationJson\Ok : ($call is Activity\ListReposWatchedByUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is EnterpriseAdmin\SuspendUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is EnterpriseAdmin\UnsuspendUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : Schema\Operations\Meta\GetZen\Response\TextPlain\Ok
     */
    // phpcs:enable
    public function call(string $call, array $params = [])
    {
        $result = await($this->callAsync($call, $params));
        if ($result instanceof Observable) {
            $result = awaitObservable($result);
        }

        return $result;
    }

    // phpcs:disable
    /**
     * @return ($call is Meta\Root::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Root> : ($call is EnterpriseAdmin\ListGlobalWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GlobalHook> : ($call is EnterpriseAdmin\CreateGlobalWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GlobalHook> : ($call is EnterpriseAdmin\GetGlobalWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GlobalHook> : ($call is EnterpriseAdmin\DeleteGlobalWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\UpdateGlobalWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GlobalHook2> : ($call is EnterpriseAdmin\PingGlobalWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\ListPublicKeys::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PublicKeyFull> : ($call is EnterpriseAdmin\DeletePublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\CreateOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is EnterpriseAdmin\UpdateOrgName::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\EnterpriseAdmin\UpdateOrgName\Response\ApplicationJson\Accepted> : ($call is EnterpriseAdmin\ListPreReceiveEnvironments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironment> : ($call is EnterpriseAdmin\CreatePreReceiveEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironment> : ($call is EnterpriseAdmin\GetPreReceiveEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironment> : ($call is EnterpriseAdmin\DeletePreReceiveEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\UpdatePreReceiveEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironment> : ($call is EnterpriseAdmin\StartPreReceiveEnvironmentDownload::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironmentDownloadStatus> : ($call is EnterpriseAdmin\StartPreReceiveEnvironmentDownloadStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|Schema\PreReceiveEnvironmentDownloadStatus> : ($call is EnterpriseAdmin\GetDownloadStatusForPreReceiveEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PreReceiveEnvironmentDownloadStatus> : ($call is EnterpriseAdmin\GetDownloadStatusForPreReceiveEnvironmentStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|Schema\PreReceiveEnvironmentDownloadStatus> : ($call is EnterpriseAdmin\ListPersonalAccessTokens::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is EnterpriseAdmin\DeletePersonalAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\DeleteUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\CreateImpersonationOAuthToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is EnterpriseAdmin\DeleteImpersonationOAuthToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Apps\CreateFromManifest::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Apps\CreateFromManifest\Response\ApplicationJson\Created> : ($call is Apps\GetWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Apps\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Apps\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Apps\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted> : ($call is Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IntegrationInstallationRequest> : ($call is Apps\ListInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Apps\GetInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Apps\DeleteInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\CreateInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InstallationToken> : ($call is Apps\SuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\UnsuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\DeleteAuthorization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\CheckToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Apps\DeleteToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\ResetToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Apps\ResetAuthorization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Apps\GetBySlug::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct> : ($call is CodesOfConduct\GetConductCode::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct> : ($call is Emojis\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Emojis\Get\Response\ApplicationJson\Ok> : ($call is EnterpriseAdmin\GetAnnouncement::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Announcement> : ($call is EnterpriseAdmin\RemoveAnnouncement::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\SetAnnouncement::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Announcement> : ($call is EnterpriseAdmin\GetLicenseInformation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseInfo> : ($call is EnterpriseAdmin\GetAllStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseOverview> : ($call is EnterpriseAdmin\GetCommentStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseCommentOverview> : ($call is EnterpriseAdmin\GetGistStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseGistOverview> : ($call is EnterpriseAdmin\GetHooksStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseHookOverview> : ($call is EnterpriseAdmin\GetIssueStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseIssueOverview> : ($call is EnterpriseAdmin\GetMilestoneStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseMilestoneOverview> : ($call is EnterpriseAdmin\GetOrgStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseOrganizationOverview> : ($call is EnterpriseAdmin\GetPagesStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterprisePageOverview> : ($call is EnterpriseAdmin\GetPullRequestStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterprisePullRequestOverview> : ($call is EnterpriseAdmin\GetRepoStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseRepositoryOverview> : ($call is EnterpriseAdmin\GetUserStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseUserOverview> : ($call is EnterpriseAdmin\GetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsEnterprisePermissions> : ($call is EnterpriseAdmin\SetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\ApplicationJson\Ok> : ($call is EnterpriseAdmin\SetSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\EnableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\DisableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\GetAllowedActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is EnterpriseAdmin\SetAllowedActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise\Response\ApplicationJson\Ok> : ($call is EnterpriseAdmin\CreateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is EnterpriseAdmin\GetSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is EnterpriseAdmin\DeleteSelfHostedRunnerGroupFromEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\UpdateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\ApplicationJson\Ok> : ($call is EnterpriseAdmin\SetSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\AddSelfHostedRunnerToGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\RemoveSelfHostedRunnerFromGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\ListSelfHostedRunnersForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise\Response\ApplicationJson\Ok> : ($call is EnterpriseAdmin\ListRunnerApplicationsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is EnterpriseAdmin\CreateRegistrationTokenForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is EnterpriseAdmin\CreateRemoveTokenForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is EnterpriseAdmin\GetSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is EnterpriseAdmin\DeleteSelfHostedRunnerFromEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\GetAuditLog::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent> : ($call is SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSecretScanningAlert> : ($call is Activity\GetFeeds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Feed> : ($call is Gists\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Gists\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Gists\ListPublic::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Gists\ListStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Gists\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Gists\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Gists\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Gists\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Gists\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Gists\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Gists\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistCommit> : ($call is Gists\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Gists\Fork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Gists\CheckIsStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\Star::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\Unstar::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\GetRevision::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Gitignore\GetAllTemplates::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Gitignore\GetAllTemplates\Response\ApplicationJson\Ok> : ($call is Gitignore\GetTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitignoreTemplate> : ($call is Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Apps\ListReposAccessibleToInstallation\Response\ApplicationJson\Ok> : ($call is Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseSimple> : ($call is Licenses\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\License> : ($call is Markdown\Render::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Markdown\Render\Response\TextHtml\Ok> : ($call is Markdown\RenderRaw::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Markdown\RenderRaw\Response\TextHtml\Ok> : ($call is Meta\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ApiOverview> : ($call is Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Activity\MarkNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Activity\MarkNotificationsAsRead\Response\ApplicationJson\Accepted> : ($call is Activity\GetThread::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Activity\MarkThreadAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription> : ($call is Activity\SetThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription> : ($call is Activity\DeleteThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Meta\GetOctocat::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Meta\GetOctocat\Response\ApplicationOctocatStream\Ok> : ($call is Orgs\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Orgs\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull> : ($call is Orgs\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull> : ($call is Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsOrganizationPermissions> : ($call is Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\ApplicationJson\Ok> : ($call is Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListSelfHostedRunnerGroupsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListSelfHostedRunnerGroupsForOrg\Response\ApplicationJson\Ok> : ($call is Actions\CreateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Actions\GetSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Actions\DeleteSelfHostedRunnerGroupFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\UpdateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Actions\AddSelfHostedRunnerToGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListSelfHostedRunnersForOrg\Response\ApplicationJson\Ok> : ($call is Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListOrgSecrets\Response\ApplicationJson\Ok> : ($call is Actions\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Actions\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationActionsSecret> : ($call is Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Actions\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListSelectedReposForOrgSecret\Response\ApplicationJson\Ok> : ($call is Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Orgs\GetAuditLog::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent> : ($call is CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningOrganizationAlertItems> : ($call is Teams\ExternalIdpGroupInfoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroup> : ($call is Teams\ListExternalIdpGroupsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroups> : ($call is Orgs\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Orgs\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Orgs\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Orgs\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Orgs\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Orgs\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Orgs\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Orgs\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted> : ($call is Orgs\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\GetOrgInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Orgs\ListAppInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Orgs\ListAppInstallations\Response\ApplicationJson\Ok> : ($call is Issues\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Orgs\ListMembers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Orgs\CheckMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Orgs\RemoveMember::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Orgs\GetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Orgs\SetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Orgs\RemoveMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Migrations\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Migrations\StartForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Migrations\GetStatusForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Migrations\DownloadArchiveForOrgStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Migrations\UnlockRepoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Migrations\ListReposForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Orgs\ListOutsideCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Orgs\ConvertMemberToOutsideCollaborator\Response\ApplicationJson\Accepted> : ($call is Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Projects\CreateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Repos\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Repos\CreateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Teams\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Teams\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Teams\GetByName::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Teams\DeleteInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Teams\ListDiscussionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\CreateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\GetDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UnlinkExternalIdpGroupFromTeamForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\LinkExternalIdpGroupToTeamForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroup> : ($call is Teams\ListMembersInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListProjectsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\RemoveProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListReposInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\RemoveRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListChildInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Projects\GetCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Projects\DeleteCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\UpdateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Projects\MoveCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Projects\MoveCard\Response\ApplicationJson\Created> : ($call is Projects\GetColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Projects\DeleteColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\UpdateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Projects\ListCards::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Projects\CreateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Projects\MoveColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Projects\MoveColumn\Response\ApplicationJson\Created> : ($call is Projects\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Projects\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Projects\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Projects\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Projects\GetPermissionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCollaboratorPermission> : ($call is Projects\ListColumns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Projects\CreateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is RateLimit\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RateLimitOverview> : ($call is Repos\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError> : ($call is Repos\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Repos\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError> : ($call is Actions\ListArtifactsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListArtifactsForRepo\Response\ApplicationJson\Ok> : ($call is Actions\GetArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Artifact> : ($call is Actions\DeleteArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DownloadArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DownloadArtifactStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Actions\GetJobForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Job> : ($call is Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DownloadJobLogsForWorkflowRunStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListRepoOrganizationSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListRepoOrganizationSecrets\Response\ApplicationJson\Ok> : ($call is Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsRepositoryPermissions> : ($call is Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\GetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListSelfHostedRunnersForRepo\Response\ApplicationJson\Ok> : ($call is Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListWorkflowRunsForRepo\Response\ApplicationJson\Ok> : ($call is Actions\GetWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Actions\DeleteWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListWorkflowRunArtifacts\Response\ApplicationJson\Ok> : ($call is Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListJobsForWorkflowRunAttempt\Response\ApplicationJson\Ok> : ($call is Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DownloadWorkflowRunAttemptLogsStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Actions\CancelWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListJobsForWorkflowRun\Response\ApplicationJson\Ok> : ($call is Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\DownloadWorkflowRunLogsStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ReRunWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Actions\GetWorkflowRunUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRunUsage> : ($call is Actions\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListRepoSecrets\Response\ApplicationJson\Ok> : ($call is Actions\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Actions\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsSecret> : ($call is Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Actions\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListRepoWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListRepoWorkflows\Response\ApplicationJson\Ok> : ($call is Actions\GetWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Workflow> : ($call is Actions\DisableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\EnableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Actions\ListWorkflowRuns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Actions\ListWorkflowRuns\Response\ApplicationJson\Ok> : ($call is Actions\GetWorkflowUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowUsage> : ($call is Issues\ListAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListAutolinks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Repos\CreateAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Repos\GetAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Repos\DeleteAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListBranches::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBranch> : ($call is Repos\GetBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchWithProtection|Schema\BasicError> : ($call is Repos\GetBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchProtection> : ($call is Repos\UpdateBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranch> : ($call is Repos\DeleteBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Repos\SetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview> : ($call is Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview> : ($call is Repos\GetCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetStatusChecksProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy> : ($call is Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy> : ($call is Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\GetAllStatusCheckContexts\Response\ApplicationJson\Ok> : ($call is Repos\SetStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\SetStatusCheckContexts\Response\ApplicationJson\Ok> : ($call is Repos\AddStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\AddStatusCheckContexts\Response\ApplicationJson\Ok> : ($call is Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\RemoveStatusCheckContexts\Response\ApplicationJson\Ok> : ($call is Repos\GetAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchRestrictionPolicy> : ($call is Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Repos\SetAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Repos\AddAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Repos\SetUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Repos\AddUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Checks\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Checks\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Checks\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Checks\ListAnnotations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckAnnotation> : ($call is Checks\RerequestRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Checks\CreateSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Checks\SetSuitesPreferences::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuitePreference> : ($call is Checks\GetSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Checks\ListForSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Checks\ListForSuite\Response\ApplicationJson\Ok> : ($call is Checks\RerequestSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertItems> : ($call is CodeScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert> : ($call is CodeScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert> : ($call is CodeScanning\ListAlertInstances::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertInstance> : ($call is CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis> : ($call is CodeScanning\GetAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis|Schema\Operations\CodeScanning\GetAnalysis\Response\ApplicationJsonSarif\Ok> : ($call is CodeScanning\DeleteAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysisDeletion> : ($call is CodeScanning\UploadSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsReceipt> : ($call is CodeScanning\GetSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsStatus> : ($call is Repos\CodeownersErrors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeownersErrors> : ($call is Repos\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Collaborator> : ($call is Repos\CheckCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Repos\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryCollaboratorPermission> : ($call is Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Repos\GetCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Repos\DeleteCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Reactions\ListForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchShort> : ($call is Repos\ListCommentsForCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Repos\CreateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Repos\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Checks\ListForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Checks\ListForRef\Response\ApplicationJson\Ok> : ($call is Checks\ListSuitesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Checks\ListSuitesForRef\Response\ApplicationJson\Ok> : ($call is Repos\GetCombinedStatusForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedCommitStatus> : ($call is Repos\ListCommitStatusesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status|Schema\BasicError> : ($call is Repos\CompareCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComparison> : ($call is Repos\GetContent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentTree|Schema\Operations\Repos\GetContent\Response\ApplicationJson\Ok> : ($call is Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit> : ($call is Repos\DeleteFile::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit> : ($call is Repos\ListContributors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Contributor> : ($call is Repos\ListDeployments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Repos\CreateDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment|Schema\Operations\Repos\CreateDeployment\Response\ApplicationJson\Accepted> : ($call is Repos\GetDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Repos\DeleteDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListDeploymentStatuses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Repos\CreateDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Repos\GetDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Repos\CreateDispatchEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\GetAllEnvironments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\GetAllEnvironments\Response\ApplicationJson\Ok> : ($call is Repos\GetEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment> : ($call is Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment> : ($call is Repos\DeleteAnEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\ListDeploymentBranchPolicies\Response\ApplicationJson\Ok> : ($call is Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\ListRepoEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Repos\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Repos\CreateFork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository> : ($call is Git\CreateBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBlob> : ($call is Git\GetBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Blob> : ($call is Git\CreateCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit> : ($call is Git\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit> : ($call is Git\ListMatchingRefs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Git\GetRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Git\CreateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Git\DeleteRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Git\UpdateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Git\CreateTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag> : ($call is Git\GetTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag> : ($call is Git\CreateTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree> : ($call is Git\GetTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree> : ($call is Repos\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Repos\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Repos\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Repos\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Repos\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Repos\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted> : ($call is Repos\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\TestPushWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\GetRepoInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation|Schema\BasicError> : ($call is Repos\ListInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Repos\DeleteInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Issues\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Issues\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Issues\ListCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Issues\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Issues\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Reactions\ListForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\ListEventsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent> : ($call is Issues\GetEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent> : ($call is Issues\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Issues\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Issues\AddAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Issues\RemoveAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Issues\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Issues\ListEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEventForIssue> : ($call is Issues\ListLabelsOnIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Issues\SetLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Issues\AddLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Issues\RemoveAllLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Issues\RemoveLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Issues\Lock::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\Unlock::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Reactions\ListForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\ListEventsForTimeline::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TimelineIssueEvents> : ($call is Repos\ListDeployKeys::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Repos\CreateDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Repos\GetDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Repos\DeleteDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\ListLabelsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Issues\CreateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Issues\GetLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Issues\DeleteLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\UpdateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Repos\ListLanguages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Language> : ($call is Repos\EnableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\EnableLfsForRepo\Response\ApplicationJson\Accepted> : ($call is Repos\DisableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Licenses\GetForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseContent> : ($call is Repos\MergeUpstream::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MergedUpstream> : ($call is Repos\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Issues\ListMilestones::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Issues\CreateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Issues\GetMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Issues\DeleteMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\UpdateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Issues\ListLabelsForMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Activity\MarkRepoNotificationsAsRead\Response\ApplicationJson\Accepted> : ($call is Repos\GetPages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page> : ($call is Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\CreatePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page> : ($call is Repos\DeletePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListPagesBuilds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Repos\RequestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuildStatus> : ($call is Repos\GetLatestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Repos\GetPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Projects\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Projects\CreateForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Pulls\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Pulls\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Pulls\GetReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Pulls\DeleteReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Pulls\UpdateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Pulls\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Pulls\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Pulls\ListReviewComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Pulls\CreateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Pulls\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Pulls\ListFiles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DiffEntry> : ($call is Pulls\CheckIfMerged::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Pulls\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestMergeResult> : ($call is Pulls\ListRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewRequest> : ($call is Pulls\RequestReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Pulls\ListReviews::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\CreateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\GetReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\UpdateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\DeletePendingReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\ListCommentsForReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReviewComment> : ($call is Pulls\DismissReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\SubmitReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Pulls\UpdateBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Pulls\UpdateBranch\Response\ApplicationJson\Accepted> : ($call is Repos\GetReadme::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile> : ($call is Repos\GetReadmeInDirectory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile> : ($call is Repos\ListReleases::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\CreateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\GetReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Repos\DeleteReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Repos\GetLatestRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\GetReleaseByTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\GetRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\DeleteRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\UpdateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Repos\ListReleaseAssets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Repos\UploadReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Reactions\ListForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\CreateForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Reactions\DeleteForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is SecretScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is SecretScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningLocation> : ($call is Activity\ListStargazersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Activity\ListStargazersForRepo\Response\ApplicationJson\Ok> : ($call is Repos\GetCodeFrequencyStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Ok|Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Accepted> : ($call is Repos\GetCommitActivityStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitActivity|Schema\Operations\Repos\GetCommitActivityStats\Response\ApplicationJson\Accepted> : ($call is Repos\GetContributorsStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContributorActivity|Schema\Operations\Repos\GetContributorsStats\Response\ApplicationJson\Accepted> : ($call is Repos\GetParticipationStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ParticipationStats> : ($call is Repos\GetPunchCardStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Ok> : ($call is Repos\CreateCommitStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status> : ($call is Activity\ListWatchersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Activity\GetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription> : ($call is Activity\SetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription> : ($call is Activity\DeleteRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListTags::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Tag> : ($call is Repos\DownloadTarballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\DownloadTarballArchiveStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Repos\ListTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Repos\GetAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic> : ($call is Repos\ReplaceAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic> : ($call is Repos\Transfer::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Repos\DownloadZipballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\DownloadZipballArchiveStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Repos\CreateUsingTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Search\Code::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Code\Response\ApplicationJson\Ok> : ($call is Search\Commits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Commits\Response\ApplicationJson\Ok> : ($call is Search\IssuesAndPullRequests::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\IssuesAndPullRequests\Response\ApplicationJson\Ok> : ($call is Search\Labels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Labels\Response\ApplicationJson\Ok> : ($call is Search\Repos::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Repos\Response\ApplicationJson\Ok> : ($call is Search\Topics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Topics\Response\ApplicationJson\Ok> : ($call is Search\Users::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Search\Users\Response\ApplicationJson\Ok> : ($call is Teams\GetLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Teams\DeleteLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Teams\ListDiscussionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\CreateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\GetDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Teams\ListMembersLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Teams\GetMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\AddMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\RemoveMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListProjectsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\RemoveProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListReposLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\RemoveRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Teams\ListChildLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Users\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Users\GetAuthenticated\Response\ApplicationJson\Ok> : ($call is Users\UpdateAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PrivateUser> : ($call is Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Users\Follow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Users\Unfollow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Apps\ListInstallationsForAuthenticatedUser\Response\ApplicationJson\Ok> : ($call is Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Apps\ListInstallationReposForAuthenticatedUser\Response\ApplicationJson\Ok> : ($call is Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Issues\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Repos\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\StarredRepository> : ($call is Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Teams\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Users\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Users\GetByUsername::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Users\GetByUsername\Response\ApplicationJson\Ok> : ($call is Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Users\ListFollowersForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Users\ListFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Users\CheckFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Gists\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Users\ListGpgKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Users\GetContextForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hovercard> : ($call is Apps\GetUserInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Users\ListPublicKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\KeySimple> : ($call is Orgs\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Projects\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Repos\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Activity\ListReposStarredByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operations\Activity\ListReposStarredByUser\Response\ApplicationJson\Ok> : ($call is Activity\ListReposWatchedByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is EnterpriseAdmin\SuspendUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is EnterpriseAdmin\UnsuspendUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : \React\Promise\PromiseInterface<Schema\Operations\Meta\GetZen\Response\TextPlain\Ok
     */
    // phpcs:enable
    public function callAsync(string $call, array $params = [])
    {
        [$method, $path] = explode(' ', $call);
        $pathChunks      = explode('/', $path);
        $pathChunksCount = count($pathChunks);
        if ($method === 'GET') {
            if ($pathChunksCount === 1) {
                if (array_key_exists(Router\Get\One::class, $this->router) === false) {
                    $this->router[Router\Get\One::class] = new Router\Get\One(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\One::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Router\Get\Three::class, $this->router) === false) {
                    $this->router[Router\Get\Three::class] = new Router\Get\Three(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Router\Get\Four::class, $this->router) === false) {
                    $this->router[Router\Get\Four::class] = new Router\Get\Four(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Get\Six::class, $this->router) === false) {
                    $this->router[Router\Get\Six::class] = new Router\Get\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Router\Get\Two::class, $this->router) === false) {
                    $this->router[Router\Get\Two::class] = new Router\Get\Two(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Router\Get\Five::class, $this->router) === false) {
                    $this->router[Router\Get\Five::class] = new Router\Get\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Router\Get\Seven::class, $this->router) === false) {
                    $this->router[Router\Get\Seven::class] = new Router\Get\Seven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Get\Eight::class, $this->router) === false) {
                    $this->router[Router\Get\Eight::class] = new Router\Get\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Router\Get\Nine::class, $this->router) === false) {
                    $this->router[Router\Get\Nine::class] = new Router\Get\Nine(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Router\Get\Ten::class, $this->router) === false) {
                    $this->router[Router\Get\Ten::class] = new Router\Get\Ten(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Get\Ten::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'POST') {
            if ($pathChunksCount === 3) {
                if (array_key_exists(Router\Post\Three::class, $this->router) === false) {
                    $this->router[Router\Post\Three::class] = new Router\Post\Three(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Router\Post\Five::class, $this->router) === false) {
                    $this->router[Router\Post\Five::class] = new Router\Post\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Router\Post\Four::class, $this->router) === false) {
                    $this->router[Router\Post\Four::class] = new Router\Post\Four(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Post\Six::class, $this->router) === false) {
                    $this->router[Router\Post\Six::class] = new Router\Post\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Router\Post\Two::class, $this->router) === false) {
                    $this->router[Router\Post\Two::class] = new Router\Post\Two(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Post\Eight::class, $this->router) === false) {
                    $this->router[Router\Post\Eight::class] = new Router\Post\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Router\Post\Ten::class, $this->router) === false) {
                    $this->router[Router\Post\Ten::class] = new Router\Post\Ten(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Ten::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Router\Post\Seven::class, $this->router) === false) {
                    $this->router[Router\Post\Seven::class] = new Router\Post\Seven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Router\Post\Nine::class, $this->router) === false) {
                    $this->router[Router\Post\Nine::class] = new Router\Post\Nine(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Post\Nine::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'DELETE') {
            if ($pathChunksCount === 4) {
                if (array_key_exists(Router\Delete\Four::class, $this->router) === false) {
                    $this->router[Router\Delete\Four::class] = new Router\Delete\Four(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Router\Delete\Five::class, $this->router) === false) {
                    $this->router[Router\Delete\Five::class] = new Router\Delete\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Router\Delete\Three::class, $this->router) === false) {
                    $this->router[Router\Delete\Three::class] = new Router\Delete\Three(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Router\Delete\Seven::class, $this->router) === false) {
                    $this->router[Router\Delete\Seven::class] = new Router\Delete\Seven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Delete\Six::class, $this->router) === false) {
                    $this->router[Router\Delete\Six::class] = new Router\Delete\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Delete\Eight::class, $this->router) === false) {
                    $this->router[Router\Delete\Eight::class] = new Router\Delete\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Router\Delete\Nine::class, $this->router) === false) {
                    $this->router[Router\Delete\Nine::class] = new Router\Delete\Nine(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 11) {
                if (array_key_exists(Router\Delete\Eleven::class, $this->router) === false) {
                    $this->router[Router\Delete\Eleven::class] = new Router\Delete\Eleven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Delete\Eleven::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'PATCH') {
            if ($pathChunksCount === 4) {
                if (array_key_exists(Router\Patch\Four::class, $this->router) === false) {
                    $this->router[Router\Patch\Four::class] = new Router\Patch\Four(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Router\Patch\Three::class, $this->router) === false) {
                    $this->router[Router\Patch\Three::class] = new Router\Patch\Three(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Patch\Six::class, $this->router) === false) {
                    $this->router[Router\Patch\Six::class] = new Router\Patch\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Router\Patch\Five::class, $this->router) === false) {
                    $this->router[Router\Patch\Five::class] = new Router\Patch\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Router\Patch\Seven::class, $this->router) === false) {
                    $this->router[Router\Patch\Seven::class] = new Router\Patch\Seven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Router\Patch\Nine::class, $this->router) === false) {
                    $this->router[Router\Patch\Nine::class] = new Router\Patch\Nine(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Patch\Eight::class, $this->router) === false) {
                    $this->router[Router\Patch\Eight::class] = new Router\Patch\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Router\Patch\Two::class, $this->router) === false) {
                    $this->router[Router\Patch\Two::class] = new Router\Patch\Two(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Patch\Two::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'STREAM') {
            if ($pathChunksCount === 5) {
                if (array_key_exists(Router\Stream\Five::class, $this->router) === false) {
                    $this->router[Router\Stream\Five::class] = new Router\Stream\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Stream\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Stream\Six::class, $this->router) === false) {
                    $this->router[Router\Stream\Six::class] = new Router\Stream\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Stream\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Stream\Eight::class, $this->router) === false) {
                    $this->router[Router\Stream\Eight::class] = new Router\Stream\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Stream\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Router\Stream\Ten::class, $this->router) === false) {
                    $this->router[Router\Stream\Ten::class] = new Router\Stream\Ten(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Stream\Ten::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'PUT') {
            if ($pathChunksCount === 5) {
                if (array_key_exists(Router\Put\Five::class, $this->router) === false) {
                    $this->router[Router\Put\Five::class] = new Router\Put\Five(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Router\Put\Six::class, $this->router) === false) {
                    $this->router[Router\Put\Six::class] = new Router\Put\Six(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Router\Put\Seven::class, $this->router) === false) {
                    $this->router[Router\Put\Seven::class] = new Router\Put\Seven(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Router\Put\Eight::class, $this->router) === false) {
                    $this->router[Router\Put\Eight::class] = new Router\Put\Eight(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Router\Put\Four::class, $this->router) === false) {
                    $this->router[Router\Put\Four::class] = new Router\Put\Four(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Router\Put\Two::class, $this->router) === false) {
                    $this->router[Router\Put\Two::class] = new Router\Put\Two(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Router\Put\Nine::class, $this->router) === false) {
                    $this->router[Router\Put\Nine::class] = new Router\Put\Nine(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
                }

                return $this->router[Router\Put\Nine::class]->call($call, $params, $pathChunks);
            }
        }

        throw new InvalidArgumentException();
    }

    public function operations(): OperationsInterface
    {
        return $this->operations;
    }

    public function webHooks(): WebHooksInterface
    {
        return $this->webHooks;
    }
}
